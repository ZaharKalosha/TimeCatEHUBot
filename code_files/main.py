import numpy as np
import schedule

from code_files.assistant import *
from code_files.functions import *
from code_files.work_with_google_sheets import *

'''Initialization'''

# telegram bot
bot = telebot.TeleBot('5951740364:AAEvXmHPJ_fhwVxOh5SrsBC08pDrpFuPnEY')

# Admin and owner's chat log
ADMIN_CHAT_ID = 5934594152
OWNER_ID = 5934594152  # ADMIN_CHAT_ID but without ligs

# users database
# TODO: add SQL/dumps
# users_dict description - {chat_id: ['login', 'pasword', 0, auth_flag, course, specialty, settings[]]
# np.save('../data_files/users_database.npy',
#         {OWNER_ID: ['None', 'None', 0, True, -1, 'None', ['üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª']]})
#  adding an object to the database (uncomment at the first start, otherwise there will be an error)
users_dict = np.load('../data_files/users_database.npy', allow_pickle=True, fix_imports=True).item()
users_dict = dict(users_dict)

# sheets database
# np.save('../data_files/sheets.npy', {'specialty': ['empty_url', 'empty_url', 'empty_url', 'empty_url', 'empty_url']})
#  adding an object to the database (uncomment at the first start, otherwise there will be an error)
spread_sheets_list = np.load('../data_files/sheets.npy', allow_pickle=True, fix_imports=True).item()
spread_sheets_list = dict(spread_sheets_list)

# cooldown info
cooldown = {}
requests_count = {}
requests_what_cat_are_you_today = {}

# list of logs
to_send_logs = []
settings_flag_ = [-1]


def update_database():
    np.save('../data_files/users_database.npy', users_dict)


def update_sheets_database():
    np.save('../data_files/sheets.npy', spread_sheets_list)


def clear_cooldown():
    global cooldown, requests_count
    cooldown = {}
    requests_count = {}
    schedule.every().day.at("00:00").do(clear_cooldown)


''' Bot events '''


@bot.message_handler(commands=['start'])
def start(call):
    # welcome_sticker = open('../additional_files/welcome.tgs', 'rb')
    # bot.send_sticker(call.chat.id, welcome_sticker)
    mess = 'üëãüèº –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–¥ —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏!' \
           '\n\n' \
           '–ë—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –ø–æ–∑–Ω–∞–∫–æ–º–ª—é —Ç–µ–±—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞:' \
           '\n\n' \
           'üìí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äì —Ä–∞–∑–¥–µ–ª, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –æ–± –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö ' \
           '–∏ –ø–∞—Ä–∞—Ö (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ï–ì–£ ' \
           '—á–µ—Ä–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Moodle);' \
           '\n\n' \
           'üêà –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ü—É—à–∏—Å—Ç–∏–∫ ‚Äì –ø—Ä–∏–Ω–µ—Å—ë—Ç –≤–∞–º –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π –æ–ø—ã—Ç, –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –æ—Ç–≤–ª–µ—á—å—Å—è –æ—Ç —É—á–µ–±—ã :–ó' \
           '\n\n' \
           '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Äì –≥–∏–±–∫–æ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–¥ —Å–µ–±—è. ' \
           '–¢–∞–∫ –≤—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏, –Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –Ω–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–Ω–∏—Ö –ø–∞—Ä;' \
           '\n\n' \
           '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ ‚Äì –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π –ü—É—à–∏—Å—Ç–∏–∫–∞ –ø–æ–¥ —Å–µ–±—è –∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã.' \
           '\n\n' \
           '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É /help'
    bot.send_message(call.from_user.id, mess, parse_mode='html')
    mess = '‚¨áÔ∏è –°–Ω–∏–∑—É –Ω–∞—Ö–æ–¥—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'
    bot.send_message(call.from_user.id, mess, parse_mode='html', reply_markup=main_menu_reply_buttons)
    return


@bot.message_handler(commands=['timetable'])
def timetable(call):
    if not users_dict[call.from_user.id][3]:
        moodle_authentication(call)
    elif users_dict[call.from_user.id][4] == -1 or users_dict[call.from_user.id][5] == 'None':
        course_selection(call)

    if users_dict[call.from_user.id][3] \
            and users_dict[call.from_user.id][4] > 0 \
            and users_dict[call.from_user.id][5] != 'None':
        if requests_count[call.from_user.id] > 50:
            bot.send_message(call.from_user.id,
                             '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤(>50) –∑–∞ –¥–µ–Ω—å. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '
                             '@Zahar_i4', reply_markup=main_menu_buttons)
            return
        bot.send_message(call.from_user.id,
                         '–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ï—Å–ª–∏ –±–æ—Ç –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â—ë '
                         '—Ä–∞–∑')
        for i in spread_sheets_list:
            if i == users_dict[call.from_user.id][5]:
                if i[users_dict[call.from_user.id][4] - 1] != 'empty_url':
                    getting_of_schedule(call, getting_of_week(get_number_of_week()))
                    return
        bot.send_message(call.from_user.id,
                         '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫—É—Ä—Å–∞ –∏ —Ñ–∞–∫—É–ª—å—Ç–µ–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ @Zahar_i4')
    return


def course_selection(call):
    s1 = '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å:'
    bot.send_message(call.from_user.id, s1, reply_markup=course_selection_buttons)


def speciality_selection(call):
    s1 = '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:'
    bot.send_message(call.from_user.id, s1, reply_markup=specialty_selection_buttons)


def timetable_recall(call):
    update_database()
    s1 = "‚è≥ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...."
    bot.send_message(call.from_user.id, s1)
    timetable(call)


@bot.message_handler(commands=['today'])
def today(call):
    if get_number_of_day() == 7:
        bot.send_message(call.from_user.id, '–û–π, –∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π) üéâ')
        return
    head = range_to_head_message(
        get_range(
            spread_sheets_list[users_dict[call.from_user.id][5]][users_dict[call.from_user.id][4] - 1],
            SAMPLE_RANGE_NAME),
        get_number_of_day(),
        getting_of_week(get_number_of_week()))
    body = range_to_day_massage(
        get_range(
            spread_sheets_list[users_dict[call.from_user.id][5]][users_dict[call.from_user.id][4] - 1],
            SAMPLE_RANGE_NAME),
        get_number_of_day(),
        getting_of_week(get_number_of_week()))
    bot.send_message(call.from_user.id, head + body, parse_mode='html',
                     reply_markup=schedule_output_setting_buttons)
    return


@bot.message_handler(commands=['tomorrow'])
def tomorrow(call):
    if (get_number_of_day() + 1) % 7 == 0:
        bot.send_message(call.from_user.id, '–û–π, –∞ –∑–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π) üéâ')
        return
    next_week_flag = 0
    if get_number_of_day() + 1 > 7:
        next_week_flag = 1
    head = range_to_head_message(
        get_range(
            spread_sheets_list[users_dict[call.from_user.id][5]][users_dict[call.from_user.id][4] - 1],
            SAMPLE_RANGE_NAME),
        get_number_of_day() + 1,
        getting_of_week(get_number_of_week() + next_week_flag))
    body = range_to_day_massage(
        get_range(
            spread_sheets_list[users_dict[call.from_user.id][5]][users_dict[call.from_user.id][4] - 1],
            SAMPLE_RANGE_NAME),
        get_number_of_day() + 1,
        getting_of_week(get_number_of_week() + next_week_flag))
    bot.send_message(call.from_user.id, head + body, parse_mode='html',
                     reply_markup=schedule_output_setting_buttons)
    return


@bot.message_handler(commands=['faq'])
def faq(call):
    will_be_soon(call)


@bot.message_handler(commands=['assistant'])
def assistant(call):
    assistant_greeting(call)


@bot.message_handler(commands=['settings'])
def settings(call):
    # 'üü¢ –≤–∫–ª' 'üî¥ –æ—Ç–∫–ª'
    s1 = f'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è | —Å—Ç–∞—Ç—É—Å' \
         f'\n\n' \
         f'‚àö –ü—Ä–∞–≤–∫–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ ‚Äî {users_dict[call.from_user.id][6][0]}' \
         f'\n' \
         f'‚àö –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–∞—Ä—ã ‚Äî {users_dict[call.from_user.id][6][1]}' \
         f'\n' \
         f'‚àö –û –ø–∞—Ä–∞—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚Äî {users_dict[call.from_user.id][6][2]}' \
         f'\n' \
         f'‚àö –ù–∞—á–∞–ª–æ –ø–∞—Ä –≤ 8:30 ‚Äî {users_dict[call.from_user.id][6][3]}' \
         f'\n' \
         f'‚àö –ù–æ–≤—ã–µ –Ω–µ–¥–µ–ª–∏ ‚Äî {users_dict[call.from_user.id][6][4]}' \
         f'\n\n' \
         f'–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:'

    bot.send_message(call.from_user.id, s1, reply_markup=notification_settings_buttons)
    return


@bot.message_handler(commands=['reset_timetable'])
def reset_timetable(call):
    s1 = '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å:'
    bot.send_message(call.from_user.id, s1, reply_markup=course_selection_buttons)
    return


@bot.message_handler(commands=['assistant_settings'])
def assistant_settings(call):
    assistant_presets(call)


@bot.message_handler(commands=['help'])
def information(call):
    s1 = '/start - üîÅ  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞' \
         '\n' \
         '/timetable - üìí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' \
         '\n' \
         '/today - üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' \
         '\n' \
         '/tomorrow - üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞' \
         '\n' \
         '/vacancy - üíº –í–∞–∫–∞–Ω—Å–∏–∏' \
         '\n' \
         '/faq - üìñ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π EHU' \
         '\n' \
         '/assistant - üêà –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ü—É—à–∏—Å—Ç–∏–∫' \
         '\n' \
         '/settings - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' \
         '\n' \
         '/reset_timetable - ‚öôÔ∏è –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –∏ –∫—É—Ä—Å–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' \
         '\n' \
         '/assistantsettings - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞' \
         '\n' \
         '/help - ‚ùî –ì–∏–¥ –ø–æ –±–æ—Ç—É ' \
         '\n' \
         '/report -  üì£ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ' \
         '\n' \
         '/moodle_authentication - ‚úÖ Moodle-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' \
         '\n' \
         '/find_out_details - ‚ùì –£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ'

    s2 = '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º: @Zahar_i4'
    bot.send_message(call.from_user.id, s1)
    bot.send_message(call.from_user.id, s2)
    return


@bot.message_handler(commands=['report'])
def report(call):
    s1 = '‚ùì–¢–∞–π–º–ö–æ—Ç –ï–ì–£: –æ—Ç–∫—Ä—ã—Ç—ã–π –±–µ—Ç–∞-—Ç–µ—Å—Ç. ' \
         + '\n' \
         + '\n' \
         + '–ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –∏ –æ–±—Ä–∞—Å—Ç–∞–µ—Ç –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. ' \
         + '\n' \
         + '\n' \
         + '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É, ' \
           '–µ—Å–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º –∏ –æ–ø—ã—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è! ' \
         + '\n' \
         + '\n' \
         + '–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–º—É –∏–∑ –Ω–∞—Å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã –æ –±–æ—Ç–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π/—Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö. ' \
           '–ú—ã –±—É–¥–µ–º –≤–∞–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã! ' \
         + '\n' \
         + '\n' \
         + 'üë• –°–æ–∑–¥–∞—Ç–µ–ª–∏: ' \
         + '\n' \
         + '@daniel_warsz ‚Äî Founder ' \
         + '\n' \
         + '@Zahar_i4 ‚Äî Developer ' \
         + '\n' \
         + '\n' \
         + 'TimeCat EHU | version 0.2'

    bot.send_message(call.from_user.id, s1)
    return


@bot.message_handler(commands=['moodle_authentication'])
def moodle_authentication(call):
    s1 = 'üëÄ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ï–ì–£ —á–µ—Ä–µ–∑ —Å–≤–æ–π Moodle.' \
         '\n\n ' \
         'P.S. –ë–æ—Ç –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ "–≥–∞–ª–æ—á–∫–∏", —á—Ç–æ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç'
    bot.send_message(call.from_user.id, s1)
    moodle_getting_of_login(call)
    return


def moodle_getting_of_login(call):
    s1 = '‚úçüèº –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Moodle –ª–æ–≥–∏–Ω:'
    bot.send_message(call.from_user.id, s1)

    # next call will be login
    # noinspection PyTypeChecker
    users_dict[call.from_user.id][2] = 1
    return


def moodle_getting_of_password(call):
    s1 = '‚úçüèº –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å:'
    bot.send_message(call.from_user.id, s1)

    # next call will be password
    # noinspection PyTypeChecker
    users_dict[call.from_user.id][2] = 2
    return


@bot.message_handler(commands=['find_out_details'])
def find_out_details(call):
    login = users_dict[call.from_user.id][0]
    password = users_dict[call.from_user.id][1]
    authorization_flag = users_dict[call.from_user.id][3]
    year = users_dict[call.from_user.id][4]
    group = users_dict[call.from_user.id][5]
    bot.send_message(call.from_user.id,
                     f'–õ–æ–≥–∏–Ω: {login}. –ü–∞—Ä–æ–ª—å: {password}. '
                     f'–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {authorization_flag}. '
                     f'–ö—É—Ä—Å: {year}. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {group}.')
    # To find out the ID for adding an admin
    bot.send_message(call.from_user.id, f'Id –≤–∞—à–µ–≥–æ —á–∞—Ç–∞: {call.from_user.id}')
    return


def check_auth(message):
    bot.send_message(ADMIN_CHAT_ID, f'Upd {message.from_user.id}')
    bot.delete_message(message.chat.id, message.message_id)
    bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
    bot.send_message(message.chat.id, '‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ –æ—Ç Moodle....')
    trial_authentication_result = auth_moodle(users_dict[message.from_user.id][0],
                                              users_dict[message.from_user.id][1])

    if trial_authentication_result:
        bot.send_message(message.chat.id, '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π Moodle! '
                                          '\n\n'
                                          '–î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –æ—Ç–∫—Ä—ã—Ç')
        users_dict.update({message.from_user.id: ['None', 'None', 0, True, -1, 'None',
                                                  ['üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª']]})
    else:
        bot.send_message(message.chat.id, 'üòû –ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—Å... '
                                          '\n\n'
                                          '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–∏ Moodle-–¥–∞–Ω–Ω—ã–µ',
                         reply_markup=relogining)
        users_dict.update({message.from_user.id: ['None', 'None', 0, False, -1, 'None',
                                                  ['üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª']]})
        bot.send_message(message.chat.id, '')
    return


def getting_of_schedule(call, week):
    bot.send_message(call.from_user.id, '–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...')
    next_week_flag = 0
    if get_number_of_day() == 7:
        next_week_flag = 1

    if week + next_week_flag >= 4:
        bot.send_message(call.from_user.id, "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞(",
                         reply_markup=schedule_output_setting_buttons, parse_mode='html')
        return
    head = range_to_head_message(
        get_range(
            spread_sheets_list[users_dict[call.from_user.id][5]][users_dict[call.from_user.id][4] - 1],
            SAMPLE_RANGE_NAME),
        get_number_of_day(),
        week + next_week_flag)
    mess = ['', '', '', '', '', '']

    for i in range(1, 7):
        mess[i - 1] = range_to_day_massage(
            get_range(spread_sheets_list[users_dict[call.from_user.id][5]][users_dict[call.from_user.id][4] - 1],
                      SAMPLE_RANGE_NAME), i, week + next_week_flag)
    out = ''
    for j in range(0, 6):
        out += mess[j]
    bot.send_message(call.from_user.id, head + out, reply_markup=schedule_output_setting_buttons, parse_mode='html')
    update_sheets_database()
    return


def other_format(call):
    bot.send_message(call.from_user.id, 'üìç –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:',
                     reply_markup=schedule_output_period_setting_buttons)


@bot.message_handler(commands=['vacancy'])
def vacancy(call):
    message = '–ü—Ä–æ–µ–∫—Ç –¢–∞–π–º–ö–æ—Ç –∏—â–µ—Ç: ' \
              + '\n' \
              + '\n' \
              + 'üë§ –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚Äî ' \
              + '\n' \
              + '–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ü—É—à–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: –Ω–æ–≤—ã–º–∏ –º–µ–º–∞–º–∏, –∫–æ—Ç–∏–∫–∞–º–∏ –¥–Ω—è, —Ñ–∏–ª—å–º–∞–º–∏,' \
                ' –∞ —Ç–∞–∫–∂–µ –ø–æ–∏—Å–∫–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞. ' \
              + '\n' \
              + '\n' \
              + 'üë§ –î–∏–∑–∞–π–Ω–µ—Ä–∞ ‚Äî ' \
              + '\n' \
              + '–ü—É—à–∏—Å—Ç–∏–∫ –æ—Å—Ç—Ä–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–∏–∑–∞–π–Ω–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—Å—Ç —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –±–æ—Ç–∞, —Å–æ–∑–¥–∞—Å—Ç –∏ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–æ—Ç–∏–∫–∞ –ü—É—à–∏—Å—Ç–∏–∫–∞ –∏ —Å–æ–∑–¥–∞—Å—Ç —Å –Ω–∏–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤. ' \
              + '\n' \
              + '\n' \
              + '–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö ‚Äì –ø–∏—à–∏—Ç–µ –º–Ω–µ: @daniel_warsz ' \
              + '\n' \
              + '\n' \
              + 'P.S. –ü—Ä–æ–µ–∫—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ï–ì–£, –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'
    bot.send_message(call.from_user.id, message, reply_markup=vacancy_link_button)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.from_user.id not in users_dict:
        users_dict.update({call.from_user.id: ['None',
                                               'None',
                                               0,
                                               False,
                                               -1,
                                               'None',
                                               ['üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª']]})

    if call.data == "get_schedule":
        timetable(call)
    elif call.data == "assistant_fluffy":
        assistant(call)
    elif call.data == "notification_settings":
        settings(call)
    elif call.data == "assistant_settings":
        assistant_settings(call)

    elif call.data == "schedule_presets":
        settings_flag_[0] = 0
        bot.send_message(call.from_user.id,
                         "‚è∞ –ë–æ—Ç –±—É–¥–µ—Ç —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º –æ–± –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞—Ö –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏",
                         reply_markup=on_off_buttons)
    elif call.data == "canceled_classes":
        settings_flag_[0] = 1
        bot.send_message(call.from_user.id, "‚è∞ –ë–æ—Ç –±—É–¥–µ—Ç —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º –æ–± –≤—Å–µ—Ö –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞—Ö",
                         reply_markup=on_off_buttons)
    elif call.data == "tomorrow's_classes":
        settings_flag_[0] = 2
        bot.send_message(call.from_user.id, "‚è∞ –í 20:00 –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
                         reply_markup=on_off_buttons)
    elif call.data == "start_of_classes":
        settings_flag_[0] = 3
        bot.send_message(call.from_user.id, "‚è∞ –í 19:00 –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö —Ä–∞–Ω–Ω–∏—Ö –ø–∞—Ä–∞—Ö",
                         reply_markup=on_off_buttons)
    elif call.data == "new_weeks":
        settings_flag_[0] = 4
        bot.send_message(call.from_user.id, "‚è∞ –ë–æ—Ç –±—É–¥–µ—Ç —Å–æ–æ–±—â–∞—Ç—å –≤–∞–º –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–µ –Ω–µ–¥–µ–ª–∏",
                         reply_markup=on_off_buttons)

    elif call.data == "relogining":
        moodle_getting_of_login(call)

    elif call.data == "on":
        users_dict[call.from_user.id][6][settings_flag_[0]] = 'üü¢ –≤–∫–ª'
        bot.send_message(call.from_user.id, "‚úîÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                         reply_markup=notification_settings_buttons)
        settings(call)
    elif call.data == "off":
        users_dict[call.from_user.id][6][settings_flag_[0]] = 'üî¥ –æ—Ç–∫–ª'
        bot.send_message(call.from_user.id, "‚úîÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
                         reply_markup=notification_settings_buttons)
        settings(call)

    elif call.data == "first_year":
        users_dict[call.from_user.id][4] = 1
        speciality_selection(call)
    elif call.data == "second_year":
        users_dict[call.from_user.id][4] = 2
        speciality_selection(call)
    elif call.data == "third_year":
        users_dict[call.from_user.id][4] = 3
        speciality_selection(call)
    elif call.data == "fourth_year":
        users_dict[call.from_user.id][4] = 4
        speciality_selection(call)
    elif call.data == "fifth_year":
        users_dict[call.from_user.id][4] = 5
        speciality_selection(call)

    elif call.data == "media":
        users_dict[call.from_user.id][5] = "media"
        timetable_recall(call)
    elif call.data == "design":
        users_dict[call.from_user.id][5] = "design"
        timetable_recall(call)
    elif call.data == "theater":
        users_dict[call.from_user.id][5] = "theater"
        timetable_recall(call)
    elif call.data == "policy":
        users_dict[call.from_user.id][5] = "policy"
        timetable_recall(call)
    elif call.data == "heritage":
        users_dict[call.from_user.id][5] = "heritage"
        timetable_recall(call)
    elif call.data == "law":
        users_dict[call.from_user.id][5] = "law"
        timetable_recall(call)

    elif call.data == "back":
        if spread_sheets_list[users_dict[call.from_user.id][5]][users_dict[call.from_user.id][4] - 1] != 'empty_url':
            if getting_of_week(get_number_of_week() - 1) <= getting_of_week(get_number_of_week()):
                for i in spread_sheets_list:
                    if i == users_dict[call.from_user.id][5]:
                        if i[users_dict[call.from_user.id][4] - 1] != 'empty_url':
                            getting_of_schedule(call, getting_of_week(get_number_of_week()))
                            return
            else:
                bot.send_message(call.from_user.id, '–ñ–µ–ª–∞–µ–º–∞—è –Ω–µ–¥–µ–ª—è —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª–∞(')
            return
    elif call.data == "nothing":
        return
    elif call.data == "forward":
        if spread_sheets_list[users_dict[call.from_user.id][5]][users_dict[call.from_user.id][4] - 1] != 'empty_url':
            if getting_of_week(get_number_of_week() + 1) >= getting_of_week(get_number_of_week()):
                getting_of_schedule(call, getting_of_week(get_number_of_week() + 1))
            else:
                bot.send_message(call.from_user.id, '–ñ–µ–ª–∞–µ–º–∞—è –Ω–µ–¥–µ–ª—è –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–∏l')
            return
    elif call.data == "other_format":
        other_format(call)

    elif call.data == "today":
        today(call)
    elif call.data == "tomorrow":
        tomorrow(call)
    elif call.data == "week":
        timetable(call)

    callback_query2(call)

    update_database()
    update_sheets_database()


def will_be_soon(call):
    s1 = 'üõ† –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è:)'
    bot.send_message(call.from_user.id, s1)
    return


@bot.message_handler(content_types=["text"])
def get_user_text(message):
    formatted_message = str(message.text).lower()

    # adding new users
    if message.from_user.id not in users_dict:
        users_dict.update({message.from_user.id: ['None',
                                                  'None',
                                                  0,
                                                  False,
                                                  -1,
                                                  'None',
                                                  ['üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª', 'üî¥ –æ—Ç–∫–ª']]})

    # chat checking
    if message.from_user.id != message.chat.id:
        bot.send_message(message.chat.id, '–ë–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —á–∞—Ç–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')

    # logs
    global to_send_logs
    if to_send_logs:
        for log in to_send_logs:
            if str(log):
                bot.send_message(ADMIN_CHAT_ID, str(log))
        to_send_logs = []

    # cooldown and requests count
    if message.from_user.id in cooldown:
        if datetime.now() < cooldown[message.from_user.id] and (formatted_message == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'):
            seconds = (cooldown[message.from_user.id] - datetime.now()).total_seconds()
            bot.send_message(message.chat.id, f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {round(seconds)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º')
            return

    if message.from_user.id not in requests_count:
        requests_count[message.from_user.id] = 0

    # dev commands
    if message.from_user.id == OWNER_ID or message.from_user.id == ADMIN_CHAT_ID:
        if formatted_message == '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
            bot.send_message(message.chat.id, f'–ò—Å–ø–æ–ª—å–∑—É–µ—Ç {len(users_dict) - 1}')
            return

        elif formatted_message[:8] == '—Ä–∞—Å—Å—ã–ª–∫–∞':
            bot.send_message(message.chat.id, '–î–µ–ª–∞—é —Ä–∞—Å—Å—ã–ª–∫—É')
            correct_messages_counter = 0
            messages_counter = 0
            for i in users_dict:
                messages_counter += 1
                try:
                    bot.send_message(i, str(message.text).split('\n')[-1])
                    correct_messages_counter += 1
                except Exception as e:
                    bot.send_message(message.chat.id, e)
            bot.send_message(message.chat.id, f'–ö–æ–Ω–µ—Ü. –£—Å–ø–µ—à–Ω–æ {correct_messages_counter}/{messages_counter}')
            return

        elif formatted_message[:3] == '–±–∞–Ω':
            if len(formatted_message.split(' ')) == 2:
                ban_id = formatted_message[formatted_message.find(' ') + 1:]
                if ban_id.isdigit():
                    if int(ban_id) in users_dict:
                        users_dict[int(ban_id)][2] = -1
                        update_database()
                        bot.send_message(message.chat.id, f'–ó–∞–±–∞–Ω–µ–Ω {ban_id}')
                        return

        elif formatted_message[:5] == '–∞–Ω–±–∞–Ω':
            if len(formatted_message.split(' ')) == 2:
                ban_id = formatted_message[formatted_message.find(' ') + 1:]
                if ban_id.isdigit():
                    if int(ban_id) in users_dict:
                        users_dict[int(ban_id)][2] = 0
                        update_database()
                        bot.send_message(message.chat.id, f'–†–∞–∑–±–∞–Ω–µ–Ω {ban_id}')
                        return

        elif formatted_message[:5] == '—Å–±—Ä–æ—Å':
            if len(formatted_message.split(' ')) == 2:
                reset_id = formatted_message[formatted_message.find(' ') + 1:]
                if reset_id.isdigit():
                    if int(reset_id) in users_dict:
                        requests_count[int(reset_id)] = 0
                        requests_what_cat_are_you_today[int(reset_id)] = 0
                        bot.send_message(message.chat.id, f'–°–±—Ä–æ—à–µ–Ω {reset_id}')
                        return

        elif formatted_message == '–Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞':
            s1 = '–í–≤–µ–¥–∏—Ç–µ name, year –∏ spreadsheet_id –≤–≤–æ–¥—è—Ç—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.'
            bot.send_message(message.chat.id, s1)
            # next call will be name spreadsheet_id
            # noinspection PyTypeChecker
            users_dict[message.from_user.id][2] = 4
            return

        # name, course, spreadsheet_id
        elif users_dict[message.from_user.id][2] == 4:
            users_dict[message.from_user.id][2] = 0
            if len(formatted_message.split('\n')) == 3:
                # TODO
                name, year, spreadsheet_id = message.text.split('\n')
                # list_of_ids
                # spread_sheets_list.update({name: [spreadsheet_id]})
                # log = '{} - {}:{} - {} {} - @{}'.format(str(get_time().strftime("%B %d, %Y. %H:%M")), name,
                #                                         spreadsheet_id,
                #                                         call.from_user.first_name, call.from_user.last_name,
                #                                         call.from_user.username)
                # bot.send_message(ADMIN_CHAT_ID, log)
                if name not in spread_sheets_list:
                    spread_sheets_list.update({name: ['empty_url', 'empty_url', 'empty_url', 'empty_url', 'empty_url']})
                spread_sheets_list[name][int(year) - 1] = spreadsheet_id
                bot.send_message(ADMIN_CHAT_ID, 'Upd sheets')
                update_sheets_database()
                bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')


            else:
                bot.send_message(message.chat.id,
                                 '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë-—Ä–∞–∑. name,'
                                 ' course –∏ spreadsheet_id –≤–≤–æ–¥—è—Ç—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏')

            update_sheets_database()
            return
    # bans
    if users_dict[message.from_user.id][2] == -1:
        bot.send_message(message.chat.id,
                         '–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @Zahar_i4')
        return

    # main commands
    if formatted_message == 'üìí —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        timetable(message)

    elif formatted_message == 'üêà –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—É—à–∏—Å—Ç–∏–∫':
        assistant(message)

    elif formatted_message == '‚öôÔ∏è –Ω–∞—Å—Ç—Ä. —É–≤–µ–¥.':
        settings(message)

    elif formatted_message == '‚öôÔ∏è –Ω–∞—Å—Ç—Ä. –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞':
        assistant_settings(message)

    # login, password
    elif users_dict[message.from_user.id][2] == 1:
        users_dict[message.from_user.id][0] = message.text
        bot.delete_message(message.chat.id, message.message_id)
        moodle_getting_of_password(message)
    elif users_dict[message.from_user.id][2] == 2:
        users_dict[message.from_user.id][1] = message.text
        check_auth(message)

    else:
        bot.send_message(message.chat.id,
                         '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é :( –ï—Å–ª–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, —á—Ç–æ —è –¥–æ–ª–∂–µ–Ω —Ç–µ–±–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏ '
                         '@Zahar_i4')

    update_database()


bot.polling(none_stop=True)
